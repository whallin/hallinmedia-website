---
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import { getRelativeLocaleUrl } from "astro:i18n";

const clientsEntries = await getCollection("clientsCollection");
const clientsMap = new Map(clientsEntries.map((entry) => [entry.id, entry]));
const locale = Astro.currentLocale === "en" || Astro.currentLocale === "sv" ? Astro.currentLocale : "en";
const servicesEntries = await getCollection("servicesCollection");
const services = servicesEntries
  .filter((entry) => entry.data.featured)
  .map((entry) => ({
    id: entry.id,
    title: entry.data.serviceName[locale],
    icon: entry.data.icon,
    color: entry.data.color,
    description: entry.data.shortDescription[locale],
    price: entry.data.pricing?.startingFrom ? `${entry.data.pricing.startingFrom} SEK` : "Contact for pricing",
    cta: entry.data.cta?.[locale] || "Learn More",
    clients: entry.data.featuredClients?.map((client) => client.id) || [],
  }));

interface ColorVariant {
  border: string;
  iconBg: string;
  iconColor: string;
  price: string;
  cta: string;
  blob: string;
}

const colorVariants: Record<string, ColorVariant> = {
  red: {
    border: "hover:border-red-500/50",
    iconBg: "bg-red-500/10 dark:bg-red-500/20 group-hover:bg-red-500/30 border-red-500/20",
    iconColor: "text-red-500",
    price: "text-red-500",
    cta: "text-red-500 hover:bg-red-500",
    blob: "#dc2626",
  },
  blue: {
    border: "hover:border-blue-600/50",
    iconBg: "bg-blue-600/10 dark:bg-blue-600/20 group-hover:bg-blue-600/30 border-blue-600/20",
    iconColor: "text-blue-600",
    price: "text-blue-600",
    cta: "text-blue-600 hover:bg-blue-600",
    blob: "#2563eb",
  },
  green: {
    border: "hover:border-green-600/50",
    iconBg: "bg-green-600/10 dark:bg-green-600/20 group-hover:bg-green-600/30 border-green-600/20",
    iconColor: "text-green-600",
    price: "text-green-600",
    cta: "text-green-600 hover:bg-green-600",
    blob: "#16a34a",
  },
  purple: {
    border: "hover:border-purple-500/50",
    iconBg: "bg-purple-500/10 dark:bg-purple-500/20 group-hover:bg-purple-500/30 border-purple-500/20",
    iconColor: "text-purple-500",
    price: "text-purple-500",
    cta: "text-purple-500 hover:bg-purple-500",
    blob: "#9333ea",
  },
  orange: {
    border: "hover:border-orange-500/50",
    iconBg: "bg-orange-500/10 dark:bg-orange-500/20 group-hover:bg-orange-500/30 border-orange-500/20",
    iconColor: "text-orange-500",
    price: "text-orange-500",
    cta: "text-orange-500 hover:bg-orange-500",
    blob: "#ea580c",
  },
};

const translations = {
  en: {
    heading: "My signature services",
    description:
      "Explore my key services, designed with care and know-how. From creative ideas to visual stories and digital tools, these services are built on years of experience, helping clients like you succeed.",
    clientsbought: "Loved by clients like",
    starting: "From",
    learnMore: "Discover",
    clientLogos: "Happy client showcase",
  },
  sv: {
    heading: "Mina signaturtjänster",
    description:
      "Utforska mina kärntjänster, skapade med omsorg och expertis. Från kreativa idéer till visuella berättelser och digitala verktyg - dessa tjänster bygger på mångårig erfarenhet och hjälper kunder som dig att nå framgång.",
    clientsbought: "Uppskattas av kunder som",
    starting: "Från",
    learnMore: "Läs mer om",
    clientLogos: "Nöjda kunder i fokus",
  },
};
---

<section class="relative max-w-2xl overflow-hidden sm:mx-auto" aria-labelledby="core-services-heading">
  <header class="mb-8 space-y-6">
    <h2 id="core-services-heading" class="relative font-serif text-3xl text-stone-700 italic dark:text-stone-100">
      <span
        class="relative z-10 inline-flex flex-col gap-2 bg-amber-50 pr-4 sm:flex-row sm:items-center dark:bg-stone-900"
      >
        <Icon name="ph:magic-wand-duotone" class="h-6 w-6 text-red-500" aria-hidden="true" />
        {translations[locale].heading}
      </span>
      <span
        class="absolute top-1/2 right-0 left-0 -z-0 hidden h-px bg-stone-200 sm:block dark:bg-stone-700"
        aria-hidden="true"></span>
    </h2>
    <p class="font-serif text-stone-500 dark:text-stone-400">
      {translations[locale].description}
    </p>
  </header>
  <div class="grid gap-2 @md:grid-cols-2">
    {
      services
        .sort((a, b) => {
          if (b.clients.length !== a.clients.length) {
            return b.clients.length - a.clients.length;
          }
          return a.title.localeCompare(b.title);
        })
        .map((service) => {
          const colors = colorVariants[service.color];
          return (
            <article
              class={`group ${colors.border} @container relative overflow-hidden rounded-lg border border-stone-200 p-6 transition-colors dark:border-stone-700`}
            >
              <figure class="pointer-events-none absolute inset-0" aria-hidden="true">
                <div
                  class="radial-blob absolute h-96 w-96 -translate-x-1/2 -translate-y-1/2 rounded-full opacity-0 transition-opacity group-hover:opacity-25"
                  style={{
                    background: `radial-gradient(circle, ${colors.blob} 0%, transparent 70%)`,
                  }}
                  aria-hidden="true"
                />
              </figure>
              <div class="relative z-10 flex flex-col items-start gap-4 @md:flex-row">
                <figure class={`${colors.iconBg} rounded-lg border p-3 transition-colors`}>
                  <Icon name={service.icon} class={`${colors.iconColor} h-6 w-6`} aria-hidden="true" />
                </figure>
                <div class="@container w-full">
                  <h3 class="font-serif text-lg font-semibold text-stone-700 dark:text-stone-100">{service.title}</h3>
                  <p class="mt-2 font-serif text-stone-500 dark:text-stone-400">{service.description}</p>
                  <aside class="mt-2 flex flex-col gap-2 text-xs text-stone-400 @sm:flex-row @sm:items-center dark:text-stone-500">
                    <p>
                      {translations[locale].clientsbought} <span class="lowercase">{service.title}</span>:
                    </p>
                    <ul class="flex -space-x-2" role="list" aria-label={translations[locale].clientLogos}>
                      {service.clients
                        .map((client) => clientsMap.get(client))
                        .filter(Boolean)
                        .sort((a, b) => (b?.data.featured ? 1 : 0) - (a?.data.featured ? 1 : 0))
                        .slice(0, 3)
                        .map((clientEntry) => (
                          <li class="relative">
                            <div class="peer">
                              {clientEntry?.data.avatar && (
                                <Image
                                  src={clientEntry.data.avatar}
                                  alt={clientEntry.data.name}
                                  width={64}
                                  height={64}
                                  class="h-6 w-6 rounded-full border border-stone-200 select-none dark:border-stone-700"
                                  aria-hidden="true"
                                />
                              )}
                            </div>
                            <div class="pointer-events-none absolute bottom-full left-1/2 mb-2 -translate-x-1/2 rounded-md bg-stone-900 px-2 py-1 font-mono text-xs whitespace-nowrap text-stone-100 opacity-0 transition-opacity peer-hover:opacity-100 dark:bg-stone-700">
                              {clientEntry?.data.name}
                              <div class="absolute top-full left-1/2 h-2 w-2 -translate-x-1/2 -translate-y-1/2 rotate-45 bg-stone-900 dark:bg-stone-700" />
                            </div>
                          </li>
                        ))}
                      {service.clients.length > 3 && (
                        <li class="relative">
                          <div class="flex h-6 w-6 items-center justify-center rounded-full border border-stone-200 bg-amber-50 text-[10px] select-none dark:border-stone-700 dark:bg-stone-800">
                            +{service.clients.length - 3}
                          </div>
                        </li>
                      )}
                    </ul>
                  </aside>

                  <footer class="mt-4 flex flex-col items-start justify-between gap-1 text-sm @sm:flex-row @sm:items-center">
                    <span class={colors.price}>
                      {translations[locale].starting}
                      <strong class="font-handwrite underline decoration-wavy decoration-from-font">
                        {service.price}
                      </strong>
                    </span>
                    <a
                      href={getRelativeLocaleUrl(locale, `services/${service.id}`)}
                      class={`${colors.cta} flex items-center gap-1 font-semibold underline decoration-dashed decoration-from-font underline-offset-4 hover:text-stone-100 active:opacity-50`}
                      aria-label={`${translations[locale].learnMore} ${service.title} - ${translations[locale].starting} ${service.price}`}
                      role="button"
                    >
                      {service.cta}
                      <Icon name="ph:arrow-right" aria-hidden="true" />
                    </a>
                  </footer>
                </div>
              </div>
            </article>
          );
        })
    }
  </div>
</section>

<script>
  document.querySelectorAll(".radial-blob").forEach((blob) => {
    const article = blob.closest("article");
    let currentX = 0;
    let currentY = 0;
    let targetX = 0;
    let targetY = 0;

    article?.addEventListener("mousemove", (e) => {
      const rect = article.getBoundingClientRect();
      targetX = e.clientX - rect.left;
      targetY = e.clientY - rect.top;
    });

    function animate() {
      currentX += (targetX - currentX) * 0.15;
      currentY += (targetY - currentY) * 0.15;

      (blob as HTMLElement).style.left = `${currentX}px`;
      (blob as HTMLElement).style.top = `${currentY}px`;

      requestAnimationFrame(animate);
    }

    animate();
  });
</script>
