---
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import { getRelativeLocaleUrl } from "astro:i18n";
import Button from "../common/Button.astro";

const locale = Astro.currentLocale === "en" || Astro.currentLocale === "sv" ? Astro.currentLocale : "en";
const services = await getCollection("servicesCollection", ({ data }) => data.featured);
const clients = await getCollection("clientsCollection");
const clientsMap = new Map(clients.map((entry) => [entry.id, entry]));

const translations = {
  en: {
    heading: "My creative services & transparent pricing",
    starting: "From just",
    clientsbought: "Trusted by",
    clientLogos: "Happy client showcase",
    viewAll: "Discover all services",
    currency: "SEK",
  },
  sv: {
    heading: "Mina kreativa tjänster & tydliga priser",
    starting: "Från endast",
    clientsbought: "Anlitas av",
    clientLogos: "Nöjda kunder visar väg",
    viewAll: "Upptäck alla tjänster",
    currency: "kr",
  },
};

interface ColorVariant {
  border: string;
  iconBg: string;
  iconColor: string;
  price: string;
}

const colorVariants: Record<string, ColorVariant> = {
  red: {
    border: "hover:border-red-500/50",
    iconBg: "bg-red-500/10 dark:bg-red-500/20 group-hover:bg-red-500/30 border-red-500/20",
    iconColor: "text-red-500",
    price: "text-red-500",
  },
  blue: {
    border: "hover:border-blue-600/50",
    iconBg: "bg-blue-600/10 dark:bg-blue-600/20 group-hover:bg-blue-600/30 border-blue-600/20",
    iconColor: "text-blue-600",
    price: "text-blue-600",
  },
  green: {
    border: "hover:border-green-600/50",
    iconBg: "bg-green-600/10 dark:bg-green-600/20 group-hover:bg-green-600/30 border-green-600/20",
    iconColor: "text-green-600",
    price: "text-green-600",
  },
  purple: {
    border: "hover:border-purple-500/50",
    iconBg: "bg-purple-500/10 dark:bg-purple-500/20 group-hover:bg-purple-500/30 border-purple-500/20",
    iconColor: "text-purple-500",
    price: "text-purple-500",
  },
  orange: {
    border: "hover:border-orange-500/50",
    iconBg: "bg-orange-500/10 dark:bg-orange-500/20 group-hover:bg-orange-500/30 border-orange-500/20",
    iconColor: "text-orange-500",
    price: "text-orange-500",
  },
};
---

<section class="space-y-8">
  <header class="relative text-stone-700 dark:text-stone-100">
    <h2 class="relative font-serif text-2xl font-semibold text-stone-700 dark:text-stone-100">
      <span class="relative z-10 inline-flex flex-col gap-2 bg-amber-50 pr-4 dark:bg-stone-900">
        {translations[locale].heading}
      </span>
      <span class="absolute top-1/2 right-0 left-0 -z-0 h-px bg-stone-200 dark:bg-stone-700" aria-hidden="true"></span>
    </h2>
  </header>
  <div class="grid gap-6 sm:grid-cols-2">
    {
      services
        .sort((a, b) => {
          const aCount = a.data.featuredClients?.length || 0;
          const bCount = b.data.featuredClients?.length || 0;
          if (bCount !== aCount) {
            return bCount - aCount;
          }
          return a.data.serviceName[locale].localeCompare(b.data.serviceName[locale]);
        })
        .map((service) => {
          const colors = colorVariants[service.data.color];
          return (
            <article
              class={`group relative overflow-hidden rounded-lg border border-stone-200 p-6 transition-colors ${colors.border} dark:border-stone-700`}
            >
              <figure class="pointer-events-none absolute inset-0 -z-10" aria-hidden="true">
                <div
                  class="radial-blob absolute h-96 w-96 -translate-x-1/2 -translate-y-1/2 rounded-full opacity-0 transition-opacity group-hover:opacity-25"
                  style={{
                    background: `radial-gradient(circle, ${
                      service.data.color === "red"
                        ? "#dc2626"
                        : service.data.color === "blue"
                          ? "#2563eb"
                          : service.data.color === "green"
                            ? "#16a34a"
                            : "#9333ea"
                    } 0%, transparent 70%)`,
                  }}
                  aria-hidden="true"
                />
              </figure>
              <div class="flex h-full flex-col">
                <div class="mb-4 flex items-center gap-4">
                  <figure class={`rounded-lg border p-3 transition-colors ${colors.iconBg}`}>
                    <Icon name={service.data.icon} class={`h-6 w-6 ${colors.iconColor}`} aria-hidden="true" />
                  </figure>
                  <dl>
                    <dt class="font-serif text-lg font-medium text-stone-700 dark:text-stone-100">
                      {service.data.serviceName[locale]}
                    </dt>
                    {service.data.pricing && (
                      <dd class={`text-sm ${colors.price}`}>
                        {translations[locale].starting}{" "}
                        <strong class="font-handwrite underline decoration-wavy decoration-from-font">
                          {service.data.pricing.startingFrom}
                          {translations[locale].currency}/{service.data.pricing.unit[locale]}
                        </strong>
                      </dd>
                    )}
                  </dl>
                </div>
                <p class="relative font-serif text-stone-500 dark:text-stone-400">
                  {service.data.shortDescription[locale]}
                </p>
                {service.data.featuredClients && service.data.featuredClients.length > 0 && (
                  <aside class="mt-auto flex flex-col gap-2 pt-4 text-xs text-stone-400 sm:flex-row sm:items-center dark:text-stone-500">
                    <p>{translations[locale].clientsbought}:</p>
                    <ul class="flex -space-x-2" role="list" aria-label={translations[locale].clientLogos}>
                      {service.data.featuredClients
                        .map((client) => clientsMap.get(client.id))
                        .filter(Boolean)
                        .sort((a, b) => (b?.data.featured ? 1 : 0) - (a?.data.featured ? 1 : 0))
                        .slice(0, 3)
                        .map((clientEntry) => (
                          <li class="relative">
                            <div class="peer">
                              {clientEntry?.data.avatar && (
                                <Image
                                  src={clientEntry.data.avatar}
                                  alt={clientEntry.data.name}
                                  width={64}
                                  height={64}
                                  class="h-6 w-6 rounded-full border border-stone-200 select-none dark:border-stone-700"
                                  aria-hidden="true"
                                />
                              )}
                            </div>
                            <div class="pointer-events-none absolute bottom-full left-1/2 z-10 mb-2 -translate-x-1/2 rounded-md bg-stone-900 px-2 py-1 font-mono text-xs whitespace-nowrap text-stone-100 opacity-0 transition-opacity peer-hover:opacity-100 dark:bg-stone-700">
                              {clientEntry?.data.name}
                              <div class="absolute top-full left-1/2 h-2 w-2 -translate-x-1/2 -translate-y-1/2 rotate-45 bg-stone-900 dark:bg-stone-700" />
                            </div>
                          </li>
                        ))}
                      {service.data.featuredClients.length > 3 && (
                        <li class="relative">
                          <div class="flex h-6 w-6 items-center justify-center rounded-full border border-stone-200 bg-amber-50 text-[10px] select-none dark:border-stone-700 dark:bg-stone-800">
                            +{service.data.featuredClients.length - 3}
                          </div>
                        </li>
                      )}
                    </ul>
                  </aside>
                )}
              </div>
            </article>
          );
        })
    }
  </div>
  <footer class="text-center">
    <Button href={getRelativeLocaleUrl(locale, "services")} variant="secondary">
      <Icon name="ph:magic-wand-duotone" aria-hidden="true" />
      {translations[locale].viewAll}
      <Icon name="ph:arrow-right" aria-hidden="true" />
    </Button>
  </footer>
</section>

<script>
  document.querySelectorAll(".radial-blob").forEach((blob) => {
    const article = blob.closest(".group");
    let currentX = 0;
    let currentY = 0;
    let targetX = 0;
    let targetY = 0;

    article?.addEventListener("mousemove", (e) => {
      const rect = article.getBoundingClientRect();
      targetX = e.clientX - rect.left;
      targetY = e.clientY - rect.top;
    });

    function animate() {
      currentX += (targetX - currentX) * 0.15;
      currentY += (targetY - currentY) * 0.15;

      (blob as HTMLElement).style.left = `${currentX}px`;
      (blob as HTMLElement).style.top = `${currentY}px`;

      requestAnimationFrame(animate);
    }

    animate();
  });
</script>
