---
import { Icon } from "astro-icon/components";
import { useTranslations } from "../i18n/utils";

const t = useTranslations(Astro.currentLocale);
---

<button
  class="theme-toggle rounded-lg bg-stone-200 p-2 text-stone-800 transition duration-200 hover:bg-stone-300 active:scale-90 dark:bg-stone-700 dark:text-stone-100 dark:hover:bg-stone-600"
  title={t("button.theme-toggle")}
  aria-label={t("button.theme-toggle")}
>
  <Icon
    name="ph:moon-stars-duotone"
    class="theme-toggle-dark-icon hidden h-5 w-5"
  />
  <Icon name="ph:sun-duotone" class="theme-toggle-light-icon hidden h-5 w-5" />
</button>

<script>
  function initializeThemeToggles() {
    const themeToggles = document.querySelectorAll(".theme-toggle");

    // Set initial theme state for all toggles
    const isDark = document.documentElement.classList.contains("dark");
    themeToggles.forEach((toggle) => {
      const darkIcon = toggle.querySelector(".theme-toggle-dark-icon");
      const lightIcon = toggle.querySelector(".theme-toggle-light-icon");

      if (isDark) {
        darkIcon?.classList.add("hidden");
        lightIcon?.classList.remove("hidden");
      } else {
        lightIcon?.classList.add("hidden");
        darkIcon?.classList.remove("hidden");
      }
    });

    // Add click handlers
    themeToggles.forEach((toggle) => {
      toggle.addEventListener("click", () => {
        const isDark = document.documentElement.classList.contains("dark");

        // Toggle theme
        if (isDark) {
          document.documentElement.classList.remove("dark");
          localStorage.theme = "light";
        } else {
          document.documentElement.classList.add("dark");
          localStorage.theme = "dark";
        }

        // Update all toggle buttons
        themeToggles.forEach((toggle) => {
          const darkIcon = toggle.querySelector(".theme-toggle-dark-icon");
          const lightIcon = toggle.querySelector(".theme-toggle-light-icon");

          if (isDark) {
            lightIcon?.classList.add("hidden");
            darkIcon?.classList.remove("hidden");
          } else {
            darkIcon?.classList.add("hidden");
            lightIcon?.classList.remove("hidden");
          }
        });
      });
    });
  }

  // Initialize on load
  initializeThemeToggles();

  // Re-initialize after view transitions
  document.addEventListener("astro:after-swap", initializeThemeToggles);

  // Set initial theme on page load
  if (
    localStorage.theme === "dark" ||
    (!("theme" in localStorage) &&
      window.matchMedia("(prefers-color-scheme: dark)").matches)
  ) {
    document.documentElement.classList.add("dark");
  } else {
    document.documentElement.classList.remove("dark");
  }
</script>
